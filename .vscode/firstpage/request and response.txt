sql

CREATE TABLE leaves (
  id INT AUTO_INCREMENT PRIMARY KEY,
  employee_id INT NOT NULL,
  team_leader_id INT NOT NULL,
  manager_id INT NOT NULL,
  status ENUM('pending', 'approved', 'rejected') NOT NULL,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  reason TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

python

from django.db import models
from django.contrib.auth.models import User

class Leave(models.Model):
    EMPLOYEE = 'employee'
    TEAM_LEADER = 'team_leader'
    MANAGER = 'manager'

    ROLE_CHOICES = [
        (EMPLOYEE, 'Employee'),
        (TEAM_LEADER, 'Team Leader'),
        (MANAGER, 'Manager'),
    ]

    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
    ]

    employee = models.ForeignKey(User, on_delete=models.CASCADE, related_name='employee_leaves')
    team_leader = models.ForeignKey(User, on_delete=models.CASCADE, related_name='team_leader_leaves')
    manager = models.ForeignKey(User, on_delete=models.CASCADE, related_name='manager_leaves')
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')
    start_date = models.DateField()
    end_date = models.DateField()
    reason = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f'{self.employee.get_full_name()} - {self.start_date} to {self.end_date}'

python

from django import forms
from .models import Leave

class LeaveForm(forms.ModelForm):
    class Meta:
        model = Leave
        fields = ['start_date', 'end_date', 'reason']

python

from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .models import Leave
from .forms import LeaveForm

@login_required
def leave_request(request):
    if request.method == 'POST':
        form = LeaveForm(request.POST)
        if form.is_valid():
            leave = form.save(commit=False)
            leave.employee = request.user
            leave.save()
            return redirect('leave_requests')
    else:
        form = LeaveForm()
    return render(request, 'leave_request.html', {'form': form})

@login_required
def leave_requests(request):
    leaves = Leave.objects.filter(employee=request.user, status='pending')
    return render(request, 'leave_requests.html', {'leaves': leaves})

@login_required
def leave_approve(request, pk):
    leave = Leave.objects.get(pk=pk)
    if request.user == leave.team_leader:
        leave.status = 'approved'
        leave.save()
    return redirect('leave_requests')

@login_required
def leave_reject(request, pk):
    leave = Leave.objects.get(pk=pk)
    if request.user == leave.team_leader:
        leave.status = 'rejected'
        leave.save()
    return redirect('leave_requests')

leave_request.html:

html

{% extends 'base.html' %}

{% block content %}
  <h1>Request Leave</h1>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Submit</button>
  </form>
{% endblock %}

html

{% extends 'base.html' %}

{% block content %}
  <h1>Leave Requests</h1>
  {% if leaves %}
    <ul>
      {% for leave in leaves %}
        <li>
          {{ leave.start_date }} to {{ leave.end_date }} - {{ leave.reason }}
          {% if leave.status == 'pending' %}
            <a href="{% url 'leave_approve' pk=leave.pk %}">Approve</a>
            <a href="{% url 'leave_reject' pk=leave.pk %}">Reject</a>
          {% endif %}
        </li>
      {% endfor %}
    </ul>
  {% else %}
    <p>No leave requests.</p>
  {% endif %}
{% endblock %}

html


<!DOCTYPE html>
<html>
<head>
  <title>{% block title %}{% endblock %}</title>
</head>







